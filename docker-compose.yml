services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nawy_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: nawy_db
      API_PORT: 3002
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 5s
      retries: 10    
    depends_on:
      - db
    volumes:
      - ./backend:/app
    working_dir: /app
    command: >
      sh -c '
        until nc -z db 5432; do echo "⏳ Waiting for Postgres..."; sleep 1; done;
        echo "✅ DB is up. Running migrations...";
        npm install &&
        npm run migration:up &&
        if ! psql -h db -U postgres -d nawy_db -c "SELECT 1 FROM your_table LIMIT 1" > /dev/null 2>&1; then
          echo "✅ DB is empty. Running seed...";
          npm run seed;
        else
          echo "✅ DB already seeded.";
        fi;
        echo "✅ Seed check done. Starting server...";
        npm run dev
      '
      
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      API_HOST: http://localhost:3002
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 2s
      retries: 10
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: sh -c "npm install && npm run dev"

  notifier:
    image: alpine
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    entrypoint: sh -c "echo '🚀 App is up and running at http://localhost:3000' && tail -f /dev/null"
    
volumes:
  postgres_data:
